{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","state","vanillaState","squares","Array","fill","xIsNext","this","setState","i","handleClick","slice","calculateWinner","status","winner","renderSquare","reset","React","Component","Game","lines","length","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"iPAIA,SAASA,EAAOC,GACZ,OACE,4BAAQC,UAAU,SAASC,QAASF,EAAME,SACvCF,EAAMG,O,IAKPC,E,kDACJ,aAAe,IAAD,8BACZ,gBACKC,MAAQ,EAAKC,eAFN,E,2DAKZ,MAAO,CAACC,QAASC,MAAM,GAAGC,KAAK,MACvBC,SAAS,K,8BAEPC,KAAKC,SAASD,KAAKL,kB,mCAClBO,GAAI,IAAD,OACd,OAAQ,kBAACd,EAAD,CAAQI,MAAQQ,KAAKN,MAAME,QAAQM,GAAIX,QAAU,kBAAM,EAAKY,YAAYD,Q,kCAGtEA,GACV,IAAMN,EAAUI,KAAKN,MAAME,QAAQQ,QAC/BC,EAAgBT,IAAYA,EAAQM,KAGxCN,EAAQM,GAAKF,KAAKN,MAAMK,QAAU,IAAM,IACxCC,KAAKC,SAAS,CACZL,QAASA,EACTG,SAAUC,KAAKN,MAAMK,a,mCAIZG,GAAI,IAAD,OACd,OACE,kBAACd,EAAD,CACEI,MAAOQ,KAAKN,MAAME,QAAQM,GAC1BX,QAAS,kBAAM,EAAKY,YAAYD,Q,+BAK5B,IAEJI,EAFG,OACDC,EAASF,EAAgBL,KAAKN,MAAME,SAQ1C,OALEU,EADEC,EACO,WAAaA,EAEb,iBAAmBP,KAAKN,MAAMK,QAAU,IAAM,KAIvD,6BACE,yBAAKT,UAAU,UAAUgB,GACzB,yBAAKhB,UAAU,aACZU,KAAKQ,aAAa,GAClBR,KAAKQ,aAAa,GAClBR,KAAKQ,aAAa,IAErB,yBAAKlB,UAAU,aACZU,KAAKQ,aAAa,GAClBR,KAAKQ,aAAa,GAClBR,KAAKQ,aAAa,IAErB,yBAAKlB,UAAU,aACZU,KAAKQ,aAAa,GAClBR,KAAKQ,aAAa,GAClBR,KAAKQ,aAAa,IAErB,4BAAQjB,QAAS,kBAAM,EAAKkB,UAA5B,c,GA9DYC,IAAMC,WAoEpBC,E,uKAEF,OACE,yBAAKtB,UAAU,QACb,yBAAKA,UAAU,cACb,kBAACG,EAAD,OAEF,yBAAKH,UAAU,aACb,8BACA,mC,GATSoB,IAAMC,WAuBzB,SAASN,EAAgBT,GAWvB,IAVA,IAAMiB,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAX,EAAI,EAAGA,EAAIW,EAAMC,OAAQZ,IAAK,CAAC,IAAD,cACnBW,EAAMX,GADa,GAC9Ba,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIrB,EAAQmB,IAAMnB,EAAQmB,KAAOnB,EAAQoB,IAAMpB,EAAQmB,KAAOnB,EAAQqB,GACpE,OAAOrB,EAAQmB,GAGnB,OAAO,KAtBTG,IAASC,OACP,kBAACP,EAAD,MACAQ,SAASC,eAAe,W","file":"static/js/main.f94c952f.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n    return (\r\n      <button className=\"square\" onClick={props.onClick}>\r\n        {props.value}\r\n      </button>\r\n    );\r\n  }\r\n  \r\n  class Board extends React.Component {\r\n    constructor() {\r\n      super();\r\n      this.state = this.vanillaState();\r\n    }\r\n    vanillaState () {\r\n      return {squares: Array(9).fill(null),\r\n              xIsNext: true};\r\n    }\r\n    reset () {  this.setState(this.vanillaState()) }\r\n    renderSquare(i) {\r\n      return (<Square value= {this.state.squares[i]} onClick= {() => this.handleClick(i)}/>);\r\n    }\r\n  \r\n    handleClick(i) {\r\n      const squares = this.state.squares.slice();\r\n      if (calculateWinner(squares) || squares[i]) {\r\n        return;\r\n      }\r\n      squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n      this.setState({\r\n        squares: squares,\r\n        xIsNext: !this.state.xIsNext,\r\n      });\r\n    }\r\n  \r\n    renderSquare(i) {\r\n      return (\r\n        <Square\r\n          value={this.state.squares[i]}\r\n          onClick={() => this.handleClick(i)}\r\n        />\r\n      );\r\n    }\r\n  \r\n    render() {\r\n      const winner = calculateWinner(this.state.squares);\r\n      let status;\r\n      if (winner) {\r\n        status = 'Winner: ' + winner;\r\n      } else {\r\n        status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n      }\r\n  \r\n      return (\r\n        <div>\r\n          <div className=\"status\">{status}</div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(0)}\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(3)}\r\n            {this.renderSquare(4)}\r\n            {this.renderSquare(5)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(6)}\r\n            {this.renderSquare(7)}\r\n            {this.renderSquare(8)}\r\n          </div>\r\n          <button onClick={() => this.reset()}>Reset</button>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  class Game extends React.Component {\r\n    render() {\r\n      return (\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div>{/* status */}</div>\r\n            <ol>{/* TODO */}</ol>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n  );\r\n  \r\n  function calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return squares[a];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  "],"sourceRoot":""}